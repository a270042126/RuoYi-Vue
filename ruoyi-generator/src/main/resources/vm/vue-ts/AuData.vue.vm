<template>
  <BasicModal v-bind="$attrs" title="${functionName}" width="700px" @register="register" @ok="onSubmit">
    <Form :model="form" :rules="rules" ref="formRef" layout="horizontal" class="m-form">
#foreach($column in $columns)
#set($field=$column.javaField)
#if($column.insert && !$column.pk)
#if(($column.usableColumn) || (!$column.superColumn))
#set($parentheseIndex=$column.columnComment.indexOf("（"))
#if($parentheseIndex != -1)
#set($comment=$column.columnComment.substring(0, $parentheseIndex))
#else
#set($comment=$column.columnComment)
#end
#set($dictType=$column.dictType)
#if($column.htmlType == "input")
      <FormItem label="${comment}" name="${field}">
        <Input v-model:value="form.${field}" placeholder="请输入${comment}" />
      </FormItem>
#elseif($column.htmlType == "imageUpload")
      <FormItem label="${comment}" name="${field}">
        //上传图片
      </FormItem>
#elseif($column.htmlType == "fileUpload")
      <FormItem label="${comment}" name="${field}">
        //上传文件
      </FormItem>
#elseif($column.htmlType == "editor")
      <FormItem label="${comment}" name="${field}">
        // 富文本
      </FormItem>
#elseif($column.htmlType == "select" && "" != $dictType)
#set($select=1)
      <FormItem label="${comment}" name="${field}">
        <Select
            v-model:value="form.${field}"
            showSearch
            allowClear
            :filterOption="filterOption"
            placeholder="请选择${comment}"
        >
          <SelectOption v-for="(item, key) in ${field}Options" :key="key"  #if($column.javaType == "Integer" || $column.javaType == "Long"):value="parseInt(dict.dictValue)"#else:value="dict.dictValue"#end>
            {{ item.dictLabel }}
          </SelectOption>
        </Select>
      </FormItem>
#elseif($column.htmlType == "select" && $dictType)
#set($select=1)
      <FormItem label="${comment}" name="${field}">
        <Select
          v-model:value="form.${field}"
          showSearch
          allowClear
          :filterOption="filterOption"
          placeholder="请选择${comment}"
        >
          <SelectOption value="">
            请选择字典生成
          </SelectOption>
        </Select>
      </FormItem>
#elseif($column.htmlType == "checkbox" && "" != $dictType)
#set($checkbox=1)
      <FormItem label="${comment}" name="${field}">
        <Checkbox.Group v-model:value="form.${field}">
          <Checkbox  v-for="dict in ${field}Options" :key="dict.dictValue" :value="dict.dictValue">
            {{ dict.dictLabel }}
          </Checkbox>
        </Checkbox.Group>
      </FormItem>
#elseif($column.htmlType == "checkbox" && $dictType)
#set($checkbox=1)
      <FormItem label="${comment}" name="${field}">
        <Checkbox.Group v-model:value="form.${field}">
          <Checkbox>
            请选择字典生成
          </Checkbox>
        </Checkbox.Group>
      </FormItem>
#elseif($column.htmlType == "radio" && "" != $dictType)
#set($radio=1)
      <FormItem label="${comment}" name="${field}">
        <RadioGroup v-model:value="form.${field}">
          <Radio  v-for="dict in ${field}Options" :key="dict.dictValue" #if($column.javaType == "Integer" || $column.javaType == "Long"):value="parseInt(dict.dictValue)"#else:value="dict.dictValue"#end>
            {{ dict.dictLabel }}
          </Radio>
        </RadioGroup>
      </FormItem>
#elseif($column.htmlType == "radio" && $dictType)
#set($radio=1)
      <FormItem label="${comment}" name="${field}">
        <RadioGroup v-model:value="form.${field}">
          <Radio>
            请选择字典生成
          </Radio>
        </RadioGroup>
      </FormItem>
#elseif($column.htmlType == "datetime")
#set($datetime=1)
      <FormItem label="${comment}" name="${field}">
        <DatePicker v-model:value="form.${field}" />
      </FormItem>
#elseif($column.htmlType == "textarea")
#set($textarea=true)
      <FormItem label="${comment}" name="${field}">
        <Textarea v-model:value="form.${field}" placeholder="请输入备注" />
      </FormItem>
#end
#end
#end
#end
    </Form>
  </BasicModal>
</template>

<script lang="ts">
  import { defineComponent, reactive, toRefs, ref } from 'vue';
  import { BasicModal, useModalInner } from '/@/components/Modal';
  import {
    Form,
    Input,
#if($select == 1)
    Select,
    SelectOption,
#end
#if($checkbox == 1)
    Checkbox,
#end
#if($textarea)
    Textarea,
#end
#if($radio)
    RadioGroup,
    Radio,
#end
#if($datetime == 1)
    DatePicker,
#end
    message,
  } from 'ant-design-vue';
  import { get${BusinessName}, update${BusinessName}, add${BusinessName} } from '/@/api/${moduleName}/${businessName}';
  import { ${BusinessName}Model } from '/@/api/${moduleName}/model/${businessName}Model';
#if( $select == 1 || $checkbox == 1 || $radio == 1)
  import { useSelect } from '/@/hooks/component/useSelect';
  import { getDicts } from '/@/api/sys/dict';
  import {  DictDataModel } from '/@/utils'
#end
  type FormModel = ${BusinessName}Model;
  interface DataModel {
    form: FormModel;
#foreach ($column in $columns)
#set($parentheseIndex=$column.columnComment.indexOf("（"))
#if($parentheseIndex != -1)
#set($comment=$column.columnComment.substring(0, $parentheseIndex))
#else
#set($comment=$column.columnComment)
#end
#if(${column.dictType} != '')
// $comment字典
    ${column.javaField}Options: DictDataModel[],
#end
#end
  }

  const rules = {
#foreach ($column in $columns)
#if($column.required)
#set($parentheseIndex=$column.columnComment.indexOf("（"))
#if($parentheseIndex != -1)
#set($comment=$column.columnComment.substring(0, $parentheseIndex))
#else
#set($comment=$column.columnComment)
#end
    $column.javaField: [{ required: true, message: '$comment不能为空', trigger: #if($column.htmlType == "select")'change'#else'blur'#end }]#if($velocityCount != $columns.size()),
#end
#end
#end
  };

  export default defineComponent({
    components: {
      BasicModal,
      Form,
      Input,
      FormItem: Form.Item,
#if($select)
      Select,
      SelectOption,
#end
#if($checkbox == 1)
      Checkbox,
#end
#if($radio)
      RadioGroup,
      Radio,
#end
#if($datetime == 1)
      DatePicker,
#end
#if($textarea)
      Textarea,
#end
    },
    emits: ['onRefresh', 'register'],
    setup(_, context) {
      const formRef = ref();
      const myData = reactive<DataModel>({
        form: {},
#foreach ($column in $columns)
#set($parentheseIndex=$column.columnComment.indexOf("（"))
#if($parentheseIndex != -1)
#set($comment=$column.columnComment.substring(0, $parentheseIndex))
#else
#set($comment=$column.columnComment)
#end
#if(${column.dictType} != '')
// $comment字典
        ${column.javaField}Options: [],
#end
#end
      });
      const [register, { closeModal, changeLoading }] = useModalInner((data: ${BusinessName}Model) => {
        myData.form = {};
        const id = data.${pkColumn.javaField} ? data.${pkColumn.javaField} : null;
        if (id) {
          changeLoading(true);
          get${BusinessName}(id)
            .then((res) => {
              if (res) {
                myData.form = res;
              }
              changeLoading(false);
            })
            .catch(() => {
              changeLoading(false);
            });
        }
      });
      const onSubmit = async () => {
        const data = await formRef.value.validateFields();
        if (!data) {
          return;
        }
        changeLoading(true);
        const form = myData.form;
        if (form.${pkColumn.javaField}) {
          update${BusinessName}(form)
            .then(() => {
              changeLoading(false);
              message.success('更新成功');
              context.emit('onRefresh');
              closeModal();
            })
            .catch(() => {
              changeLoading(false);
            });
        } else {
          add${BusinessName}(form)
            .then(() => {
              changeLoading(false);
              message.success('修改成功');
              context.emit('onRefresh');
              closeModal();
            })
            .catch(() => {
              changeLoading(false);
            });
        }
      };
#foreach ($column in $columns)
#if(${column.dictType} != '')
      getDicts('${column.dictType}').then((response) => {
        myData.${column.javaField}Options = response;
      });
#end
#end
#if($select == 1 || $checkbox == 1 || $radio == 1)
      const { filterOption } = useSelect();
#end
      return {
#if($select == 1 || $checkbox == 1 || $radio == 1)
        filterOption,
#end
        rules,
        ...toRefs(myData),
        register,
        onSubmit,
        formRef,
      };
    },
  });
</script>
